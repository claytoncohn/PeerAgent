'Displacement' is how far something moves from its starting point and in which direction. It's different from distance because it tells us the shortest path between the starting and ending points, and it also shows if the object moved forward (positive displacement) or backward (negative displacement). Displacement is typically measured in units of 'meters' (m) and may be represented by 'delta_x,' i.e., the change in position.

'Velocity' is like speed in that it tells how fast an object moves. Unlike speed, however,  velocity also tells us the direction. It shows how fast something is moving and which way it's going. Objects will have a positive velocity value when moving forward and a negative one when moving backward. Velocity is often measured in units of 'meters per second' (m/s) and may be represented by both 'v_x' or 'v_0x,' where v_x is the final velocity and v_0x is the initial velocity.

'Acceleration' is how quickly something speeds up, slows down, or changes direction. If a car is speeding up, it's accelerating. If it's slowing down, that's also acceleration, but in the opposite way, so it's considered deceleration. Acceleration tells us how fast the speed of something is changing. Acceleration is usually measured in units of 'meters per second squared' (m/s^2 or m/s/s) and may be represented by 'a_x'.

'Time' is the interval between two events or the time it takes for something to happen. For example, if a car takes 2 seconds to go from a complete stop to 4 m/s, then 2 seconds is the time it takes for that change. Time helps us measure how fast or slow things move. It is usually measured in units of 'seconds' (s) and may be represented by 't' or 'DeltaT', i.e., the change in time.

Final Velocity Equation: v_x = v_0x + a_x*t, where v_x is the final velocity, v_0x is the initial velocity, a_x is the acceleration, and t is the time interval. This equation states that the final velocity, v_x, is equal to the initial velocity (v_0x) plus the object’s acceleration (a_x) multiplied by the time interval (t).

Displacement Equation: delta_x = v_0x*t + (1/2)*a_x*(t^2), where delta_x is the displacement (e.g., the lookahead distance), v_0x is the initial velocity, t is the time interval, and a_x is the acceleration. This equation states that the displacement, delta_x, is equal to the initial velocity (v_0x) multiplied by the time interval (t), plus one-half the object's acceleration (a_x) multiplied by the time interval (t) squared.

Velocity Squared Equation: v_x^2 = v_0x^2 + 2*a_x*delta_x, where v_x is the final velocity, v_0x is the initial velocity, a_x is the acceleration, and delta_x is the displacement (e.g., lookahead distance). This equation states that the final velocity (v_x) squared is equal to the initial velocity (v_0x) squared, plus two times the object’s acceleration (a_x) times the displacement (delta_x). 

Updating Velocity Equation: velocity += acceleration*time. This means that the final velocity of an object (v_x) is calculated by adding the product of acceleration (a_x) and time (t) to the initial velocity (v_0x).

Updating Position Equation: position += velocity*time. This means that an object's final position is calculated by adding the product of velocity and time to its initial position. 

A 'variable' is a value in a computer program that can hold different values at different times. It is called a variable because the user can change it. For instance, a car may have a 'speed' variable that changes as the car accelerates.

A 'constant' is a value in a computer program that does not change during the simulation or the program's execution. Once it is set, it does not change.

'Initializing variables' means setting environment variables to their starting values before using them in a program or simulation.

'Updating variables' involves changing the values of existing variables based on calculations or events as the program or simulation runs. This could include updating them by setting them to specific values (e.g., x=6) or updating them relative to their previous values (e.g., x += 6).

'Loops' are programming structures that repeat instructions multiple times, often based on a condition. For instance, a simulation loop may perform several iterations based on a predefined time interval for each iteration.

'Conditional statements' are 'if' statements used in programming to handle different cases (conditions). For instance, you can use conditional statements to update a car's 'speed' variable depending on if the car is accelerating or decelerating.